#1. Git YapÄ±landÄ±rma ve Genel Ayarlar:

git config --global user.name "AdÄ±nÄ±z"
git config --global user.email "email@example.com"
git config --list  # Mevcut ayarlarÄ± gÃ¶sterir.
git config --global core.editor "vim"  # VarsayÄ±lan dÃ¼zenleyiciyi ayarlar.

#2. Depo (Repository) YÃ¶netimi:

git init  # Yeni bir Git deposu oluÅŸturur.
git clone <repo_url>  # Mevcut bir Git deposunu klonlar.
git remote add origin <url>  # Uzaktaki repo ekler.
git remote -v  # TanÄ±mlÄ± uzak repolarÄ± gÃ¶sterir.
git remote remove <remote_name>  # Uzaktaki repoyu kaldÄ±rÄ±r.


#3. DeÄŸiÅŸiklikleri Ä°zleme ve Ä°ÅŸleme:

git status  # Ã‡alÄ±ÅŸma alanÄ±nÄ±n durumunu gÃ¶sterir.
git add <dosya_adÄ±>  # DosyayÄ± izlemeye ekler (staging).
git add .  # TÃ¼m deÄŸiÅŸiklikleri ekler.
git reset <dosya_adÄ±>  # DosyayÄ± sahneden (staging) kaldÄ±rÄ±r.
git reset --hard  # TÃ¼m deÄŸiÅŸiklikleri geri alÄ±r.


#4. Commit Ä°ÅŸlemleri

git commit -m "Commit mesajÄ±"  # Staging alanÄ±ndaki deÄŸiÅŸiklikleri kaydeder.
git commit --amend -m "Yeni mesaj"  # Son commit mesajÄ±nÄ± deÄŸiÅŸtirir.
git commit --no-edit --amend  # Son commit'e ekleme yapar ama mesajÄ± deÄŸiÅŸtirmez.


#5. DeÄŸiÅŸiklikleri Ä°nceleme ve KarÅŸÄ±laÅŸtÄ±rma:

git diff  # Ã‡alÄ±ÅŸma alanÄ±ndaki deÄŸiÅŸiklikleri gÃ¶sterir.
git diff --staged  # Staging alanÄ±ndaki deÄŸiÅŸiklikleri gÃ¶sterir.
git log  # Commit geÃ§miÅŸini gÃ¶sterir
git log --oneline  # KÄ±sa commit geÃ§miÅŸi.
git log --graph --all --decorate --oneline  # GÃ¶rsel commit geÃ§miÅŸi.


#6. Dallanma (Branch) Ä°ÅŸlemleri:

git branch  # Mevcut branchleri listeler
git branch <yeni_branch>  # Yeni bir branch oluÅŸturur
git checkout <branch_adÄ±>  # Branch deÄŸiÅŸtirir
git checkout -b <yeni_branch>  # Yeni branch oluÅŸturup geÃ§iÅŸ yapar
git branch -d <branch_adÄ±>  # Branch siler
git branch -D <branch_adÄ±>  # Zorla branch siler


#7. BirleÅŸtirme (Merge) Ä°ÅŸlemleri:

git merge <branch_adÄ±>  # Belirtilen branch'i mevcut branch'e birleÅŸtirir
git merge --abort  # Merge iÅŸlemini iptal eder


#8. Rebasing (Commitleri Yeniden DÃ¼zenleme):

git rebase <branch_adÄ±>  # Commit geÃ§miÅŸini dÃ¼zenler
git rebase --abort  # Rebase iÅŸlemini iptal eder
git rebase --continue  # Ã‡akÄ±ÅŸmayÄ± Ã§Ã¶zÃ¼p devam eder


#9. Uzak Depoya GÃ¶nderme ve GÃ¼ncelleme:

git push origin <branch_adÄ±>  # DeÄŸiÅŸiklikleri uzak depoya gÃ¶nderir
git push -u origin <branch_adÄ±>  # Branchâ€™i takip ederek uzak depoya gÃ¶nderir
git push --force  # Zorla uzak depoya gÃ¶nderme
git fetch  # Uzak depodaki deÄŸiÅŸiklikleri alÄ±r
git pull  # Uzak depodan en son deÄŸiÅŸiklikleri Ã§eker ve birleÅŸtirir


#10. Etiketleme (Tag):

git tag <tag_adÄ±>  # Commitâ€™e etiket ekler
git tag -a <tag_adÄ±> -m "AÃ§Ä±klama"  # AÃ§Ä±klamalÄ± etiket oluÅŸturur
git tag  # TÃ¼m etiketleri listeler
git push origin <tag_adÄ±>  # Etiketi uzak depoya gÃ¶nderir
git push --tags  # TÃ¼m etiketleri gÃ¶nderir
git tag -d <tag_adÄ±>  # Etiketi siler
git push origin --delete <tag_adÄ±>  # Uzak etiketi siler


#11. GeÃ§miÅŸi Geri Alma:

git reset --hard HEAD~1  # Son commit'i siler
git revert HEAD  # Son commitâ€™i geri alÄ±r ama geÃ§miÅŸi korur
git checkout <commit_id>  # GeÃ§miÅŸ bir commitâ€™e gider
git cherry-pick <commit_id>  # Belirtilen commit'i mevcut branch'e ekler

#12. Submodule (Alt ModÃ¼ller):

git submodule add <repo_url> <klasÃ¶r_adÄ±>  # Alt modÃ¼l ekler
git submodule update --init --recursive  # Alt modÃ¼lleri gÃ¼nceller
git submodule foreach git pull origin master  # TÃ¼m alt modÃ¼lleri gÃ¼nceller

Bu komutlar, Git ile ilgili Ã§oÄŸu iÅŸlemi yapmanÄ± saÄŸlar. Ã–zellikle iÅŸ akÄ±ÅŸÄ±na uygun olanlarÄ± ezberleyip kullanabilirsin! ğŸš€s